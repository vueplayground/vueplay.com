import{_ as e,o as t,c as a,e as o}from"./index-df5e1a3e.js";const r={data:()=>({})},s={class:"p-6 pt-20 md:pt-6 pb-40"},l=o('<article class="max-w-2xl mx-auto mb-6 mt-4 shadow border rounded-lg bg-white px-12 py-14 overflow-auto"><h1 class="mb-6 text-4xl"> General </h1><p style="margin-top:15px;" class="text-xl py-2 font-medium"> There are a very few limitations to Vue Play as it is following the primary lifecycle concepts of the Vue.js framework. In fact the base project has been generated by the Vue.js command line tools and it should be very straight forward to work with if you are familiar with the Vue.js framework. </p><p style="margin-top:15px;" class="text-lg"> When that is said, there are a few limitations as the playground does not have a server like a normal development environment would have. The vendor libraries are built into the application and additional libraries are loaded from package.json using a Content Delivery Network. </p><p style="margin-top:15px;" class="text-lg"> This means you do not have to download anything through npm, but everything should almost instantly be available in the playground when package.json is updated. </p><p style="margin-top:15px;" class="text-lg"> As the libraries are downloaded through the use of a Content Delivery Network, Vue Play does only support libraries that are compatible as Javascript Modules (which most of the modern libraries already does or will do in the near future). </p><p style="margin-top:15px;" class="text-lg"> When the distribution folder is built, Vue Play will download the packages from npm and build like a normal project would be built using Vite. </p><p style="margin-top:15px;" class="text-lg"> In the future we will consider moving to web-containers so the development environment will be exactly the same, but for now the current streamline seems to work very well. </p></article>',1),i=[l];function n(p,d,h,c,m,u){return t(),a("section",s,i)}const y=e(r,[["render",n]]);export{y as default};
